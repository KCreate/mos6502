/*
 * This file is part of the MOS 6502 Emulator
 * (https://github.com/KCreate/mos6502)
 *
 * MIT License
 *
 * Copyright (c) 2017 - 2018 Leonard Sch√ºtz
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <chrono>
#include <iostream>
#include <thread>
#include <cstring>

#include "bus.h"
#include "cpu.h"
#include "iochip.h"
#include "rammodule.h"
#include "rommodule.h"

using namespace M6502;

int main() {
  using namespace std::chrono_literals;

  // Create the machine parts
  RAMModule<kSizeRAM> ram(kAddrRAM);
  IOChip io(kAddrIO);
  ROMModule<kSizeROM> rom(kAddrROM);

  // Create the bus and attach all the devices
  Bus bus;
  bus.attach_ram(&ram);
  bus.attach_io(&io);
  bus.attach_rom(&rom);

  // Set the reset vector
  rom.get_buffer()[kVecRES - kAddrROM] = 0x20;
  rom.get_buffer()[kVecRES - kAddrROM + 1] = 0x49;

  // Flash some code into the ROM for the CPU to execute
  uint8_t code[] = {
0x78, 0x20, 0x79, 0x49, 0xa9, 0x10, 0x8d, 0x06, 0x49, 0x58, 0xea, 0x4c, 0x2a, 0x49, 0xad, 0x03,
0x49, 0xc9, 0x01, 0xf0, 0x0b, 0xc9, 0x06, 0xf0, 0x0d, 0xc9, 0x08, 0xf0, 0x0f, 0x4c, 0x52, 0x49,
0x20, 0x85, 0x49, 0x4c, 0x52, 0x49, 0x20, 0xd6, 0x49, 0x4c, 0x52, 0x49, 0x20, 0x73, 0x49, 0x4c,
0x52, 0x49, 0x40, 0xa9, 0xd9, 0x8d, 0x08, 0x49, 0xa9, 0x00, 0x8d, 0x11, 0x49, 0xa9, 0x0a, 0x8d,
0x10, 0x49, 0x60, 0xa9, 0xd9, 0x8d, 0x08, 0x49, 0xa9, 0x00, 0x8d, 0x11, 0x49, 0xa9, 0x1e, 0x8d,
0x10, 0x49, 0x60, 0xa9, 0x19, 0x8d, 0x08, 0x49, 0x60, 0xa9, 0x00, 0x85, 0x02, 0xa9, 0x00, 0x85,
0x03, 0x20, 0xf2, 0x49, 0x60, 0xad, 0x04, 0x49, 0x85, 0x08, 0xc9, 0x16, 0xf0, 0x0f, 0xc9, 0x12,
0xf0, 0x19, 0xc9, 0x08, 0xf0, 0x23, 0xc9, 0x0a, 0xf0, 0x2d, 0x4c, 0xd5, 0x49, 0xa5, 0x00, 0xc9,
0x00, 0xf0, 0x32, 0x18, 0xe9, 0x01, 0x85, 0x00, 0x4c, 0xd5, 0x49, 0xa5, 0x00, 0xc9, 0x1c, 0xf0,
0x24, 0x18, 0x69, 0x01, 0x85, 0x00, 0x4c, 0xd5, 0x49, 0xa5, 0x01, 0xc9, 0x00, 0xf0, 0x16, 0x18,
0xe9, 0x01, 0x85, 0x01, 0x4c, 0xd5, 0x49, 0xa5, 0x01, 0xc9, 0x1c, 0xf0, 0x08, 0x18, 0x69, 0x01,
0x85, 0x01, 0x4c, 0xd5, 0x49, 0x60, 0x20, 0xba, 0x4a, 0x20, 0x0f, 0x4a, 0x20, 0x41, 0x4a, 0x20,
0xcd, 0x4a, 0x20, 0x0d, 0x4b, 0x20, 0xdd, 0x4a, 0x20, 0x25, 0x4b, 0x20, 0x56, 0x4b, 0x20, 0x66,
0x4b, 0x60, 0xa9, 0x0e, 0x85, 0x00, 0xa9, 0x0e, 0x85, 0x01, 0x20, 0xfe, 0x49, 0x60, 0xa9, 0x20,
0x85, 0x04, 0xa9, 0x12, 0x85, 0x05, 0xa9, 0x01, 0x85, 0x06, 0xa9, 0x01, 0x85, 0x07, 0x60, 0xa5,
0x06, 0xd0, 0x0a, 0xa5, 0x04, 0x18, 0xe9, 0x01, 0x85, 0x04, 0x4c, 0x27, 0x4a, 0xa5, 0x04, 0x18,
0x69, 0x01, 0x85, 0x04, 0x4c, 0x27, 0x4a, 0xa5, 0x07, 0xd0, 0x0a, 0xa5, 0x05, 0x18, 0xe9, 0x01,
0x85, 0x05, 0x4c, 0x40, 0x4a, 0xa5, 0x05, 0x18, 0x69, 0x01, 0x85, 0x05, 0xea, 0x4c, 0x40, 0x4a,
0x60, 0xa5, 0x05, 0xc9, 0x00, 0xd0, 0x07, 0xa9, 0x01, 0x85, 0x07, 0x20, 0x53, 0x49, 0xa5, 0x05,
0xc9, 0x23, 0xd0, 0x07, 0xa9, 0x00, 0x85, 0x07, 0x20, 0x53, 0x49, 0xa5, 0x05, 0xc5, 0x00, 0x90,
0x16, 0xa5, 0x05, 0x18, 0xe5, 0x00, 0xc9, 0x08, 0xb0, 0x0d, 0xa5, 0x04, 0xc9, 0x02, 0xd0, 0x07,
0xa9, 0x01, 0x85, 0x06, 0x20, 0x53, 0x49, 0xa5, 0x05, 0xc5, 0x01, 0x90, 0x16, 0xa5, 0x05, 0x18,
0xe5, 0x01, 0xc9, 0x08, 0xb0, 0x0d, 0xa5, 0x04, 0xc9, 0x3d, 0xd0, 0x07, 0xa9, 0x00, 0x85, 0x06,
0x20, 0x53, 0x49, 0xa5, 0x04, 0xc9, 0x00, 0xd0, 0x0d, 0xa5, 0x03, 0x18, 0x69, 0x01, 0x85, 0x03,
0x20, 0xfe, 0x49, 0x20, 0x63, 0x49, 0xa5, 0x04, 0xc9, 0x3f, 0xd0, 0x0d, 0xa5, 0x02, 0x18, 0x69,
0x01, 0x85, 0x02, 0x20, 0xfe, 0x49, 0x20, 0x63, 0x49, 0x60, 0xa5, 0x02, 0xc9, 0x0a, 0xf0, 0x09,
0xa5, 0x03, 0xc9, 0x0a, 0xf0, 0x03, 0x4c, 0xcc, 0x4a, 0x20, 0x79, 0x49, 0x60, 0xa9, 0x00, 0x8d,
0x0c, 0x49, 0xa9, 0x80, 0x8d, 0x0b, 0x49, 0xa9, 0x81, 0x8d, 0x0b, 0x49, 0x60, 0xa9, 0xff, 0x8d,
0x0c, 0x49, 0xa9, 0x80, 0x8d, 0x0b, 0x49, 0xa9, 0x81, 0x8d, 0x0b, 0x49, 0x60, 0xa9, 0x03, 0x8d,
0x0c, 0x49, 0xa9, 0x80, 0x8d, 0x0b, 0x49, 0xa9, 0x81, 0x8d, 0x0b, 0x49, 0x60, 0xa9, 0xfc, 0x8d,
0x0c, 0x49, 0xa9, 0x80, 0x8d, 0x0b, 0x49, 0xa9, 0x81, 0x8d, 0x0b, 0x49, 0x60, 0xa9, 0x00, 0x8d,
0x0c, 0x49, 0x8d, 0x0d, 0x49, 0xa9, 0x40, 0x8d, 0x0e, 0x49, 0xa9, 0x24, 0x8d, 0x0f, 0x49, 0xa9,
0x00, 0x8d, 0x0b, 0x49, 0x60, 0xa9, 0x01, 0x8d, 0x0c, 0x49, 0x8d, 0x0e, 0x49, 0xa5, 0x00, 0x8d,
0x0d, 0x49, 0x18, 0x69, 0x08, 0x8d, 0x0f, 0x49, 0xa9, 0x03, 0x8d, 0x0b, 0x49, 0xa9, 0x3e, 0x8d,
0x0c, 0x49, 0x8d, 0x0e, 0x49, 0xa5, 0x01, 0x8d, 0x0d, 0x49, 0x18, 0x69, 0x08, 0x8d, 0x0f, 0x49,
0xa9, 0x03, 0x8d, 0x0b, 0x49, 0x60, 0xa5, 0x04, 0x8d, 0x0c, 0x49, 0xa5, 0x05, 0x8d, 0x0d, 0x49,
0xa9, 0x02, 0x8d, 0x0b, 0x49, 0x60, 0x20, 0xfd, 0x4a, 0xa9, 0x00, 0x8d, 0x0c, 0x49, 0xa9, 0x23,
0x8d, 0x0d, 0x49, 0xa5, 0x02, 0x8d, 0x0e, 0x49, 0xa9, 0x23, 0x8d, 0x0f, 0x49, 0xa9, 0x03, 0x8d,
0x0b, 0x49, 0x20, 0xed, 0x4a, 0xa9, 0x00, 0x8d, 0x0c, 0x49, 0xa9, 0x22, 0x8d, 0x0d, 0x49, 0xa5,
0x03, 0x8d, 0x0e, 0x49, 0xa9, 0x22, 0x8d, 0x0f, 0x49, 0xa9, 0x03, 0x8d, 0x0b, 0x49, 0x20, 0xdd,
0x4a, 0xa9, 0x0a, 0x8d, 0x0c, 0x49, 0xa9, 0x22, 0x8d, 0x0d, 0x49, 0xa9, 0x02, 0x8d, 0x0b, 0x49,
0xa9, 0x0a, 0x8d, 0x0c, 0x49, 0xa9, 0x23, 0x8d, 0x0d, 0x49, 0xa9, 0x02, 0x8d, 0x0b, 0x49, 0x60,
  };
  std::memcpy(rom.get_buffer(), code, sizeof(code));

  // Hook up IRQ interrupt handler
  rom.get_buffer()[kVecIRQ - kAddrROM] = 0x2E;
  rom.get_buffer()[kVecIRQ - kAddrROM + 1] = 0x49;

  CPU cpu(&bus);
  bus.attach_cpu(&cpu);

  std::thread cpu_thread([&]() {
    cpu.dump_state(std::cout);
    cpu.start();
    std::cout << "cpu halted" << std::endl;
    cpu.dump_state(std::cout);
  });

  io.start();
  io.stop();
  cpu_thread.join();

  return 0;
}
